#!/usr/bin/env python
'''
Written by Dmitry Chirikov <dmitry@chirikov.ru>
This file is part of Luna, cluster provisioning tool
https://github.com/dchirikov/luna

This file is part of Luna.

Luna is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Luna is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Luna.  If not, see <http://www.gnu.org/licenses/>.

'''

import os
import sys
import luna
import argparse
import tempfile
import subprocess
import logging
import pymongo
import hostlist
import signal
import time

from luna import utils

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('luna')
def_format = '%20s%40s\n'
mongo_db = None

def _safe_print(out):
    try:
        print out
    except IOError:
        try:
            sys.stdout.close()
        except IOError:
            pass
        try:
            sys.stderr.close()
        except IOError:
            pass

def print_table(header, content):
    out = {'header': header , 'content': content}
    (lengths, header_array, content_array) = utils.helpers.format_output(out)

    num_spaces = 4
    fmt_str = [ "| %-" + str(num_spaces + lengths[i]) + "s" for i in range(len(lengths))]
    out_len = sum(lengths) + (num_spaces + 2) * len(lengths) + 1
    format_string = "".join(fmt_str)+"|"

    sep = "+" + "+".join(["-" * (i + num_spaces + 1) for i in lengths]) + "+"
    _safe_print(sep)
    for i in range(len(header_array)):
        _safe_print(format_string % tuple(header_array[i]))
    _safe_print(sep)
    for i in range(len(content_array)):
        _safe_print(format_string % tuple(content_array[i]))
    _safe_print(sep)

#################### Cluster
def check_active_node():
    if not luna.Cluster().is_active():
        logger.error("Inactive HA node.")
        exit(1)

def cluster_init(nodeprefix, nodedigits, path, user):
    cluster = luna.Cluster(create=True, nodeprefix = nodeprefix, nodedigits = nodedigits, path = path, user = user)

def cluster_delete():
    check_active_node()
    cluster = luna.Cluster()
    cluster.delete()

def cluster_change(**args):
    #check_active_node()
    #if not luna.Cluster().is_active():
    #    logger.error("Inactive HA node.")
    #    exit(1)
    cluster = luna.Cluster()
    for key in args:
        if args[key] == None:
            continue
        cluster.set(key, args[key])

def cluster_show(raw, out_format = def_format):
    cluster = luna.luna.Cluster()
    if raw:
        _safe_print(cluster.nice_json)
        return None
    out_json = cluster.show()
    out_str = []
    name = out_json.pop('name')
    if bool(cluster.get('dhcp_net')):
        dhcp_net = out_json.pop('dhcp_net')
        dhcp_range_start = out_json.pop('dhcp_range_start')
        dhcp_range_end = out_json.pop('dhcp_range_end')
        out_json['dhcp_net'] = '[' + cluster.get('dhcp_net') + ']'
        out_json['dhcp_range_start'] = cluster.get('dhcp_range_start')
        out_json['dhcp_range_end'] = cluster.get('dhcp_range_end')
    for key in sorted(out_json):
        out_str.append([key, out_json[key]])
    print_table(['Parameter', 'Value'], out_str)

def cluster_sync():
    check_active_node()
    cluster = luna.Cluster()
    if not cluster.is_ha():
        return True
    path = cluster.get("path")
    ips = cluster.get_cluster_ips()
    for ip in ips[1:]:
        _safe_print("%s:%s => %s:%s" % (ips[0], path, ip, path))
        utils.helpers.rsync_data(ip, path)
    _safe_print("Done. Luna daemons probably need to be restarted manually.")

def cluster_makedns():
    check_active_node()
    cluster = luna.Cluster()
    res = cluster.makedns()
    if not res:
        return False
    _safe_print("Reloading local named.")
    proc = subprocess.Popen(['/usr/bin/systemctl',
        'reload', "named"], stdout=subprocess.PIPE, close_fds=True)
    streamdata = proc.communicate()[0]
    if proc.returncode:
        _safe_print("Unable to reload named. Exit code is non-zero.")
        sys.exit(1)
    _safe_print("Success.")
    if not cluster.is_ha():
        return True
    files = []
    includefile = cluster.get('named_include_file')
    zonedir = cluster.get('named_zone_dir')
    files.extend([includefile])
    files.extend([zonedir])
    ips = cluster.get_cluster_ips()
    for ip in ips[1:]:
        for path in files:
            _safe_print("%s:%s => %s:%s" % (ips[0], path, ip, path))
            utils.helpers.rsync_data(ip, path)
        _safe_print("Reloading remote namded on " + ip + ".")
        ssh_proc = subprocess.Popen(['/usr/bin/ssh',
            '-o', 'StrictHostKeyChecking=no',
            '-o', 'UserKnownHostsFile=/dev/null', ip,
            'systemctl', "reload", "named"], stdout=subprocess.PIPE, close_fds=True)
        streamdata = ssh_proc.communicate()[0]
        if ssh_proc.returncode:
            _safe_print("Unable to reload named on " + ip + ". Exit code is non-zero.")
            sys.exit(1)
        _safe_print("Success.")
    return True

def cluster_makedhcp(**args):
    check_active_node()
    cluster = luna.Cluster()
    res = cluster.makedhcp(args['network'], args['start_ip'], args['end_ip'], args['no_ha'])
    if not res:
        return False
    _run_command(['/usr/bin/systemctl', 'stop', "dhcpd"],
        "Stopping local dhcpd.",
        "Unable to stop named. Exit code is non-zero.")
    if cluster.is_ha():
        ips = cluster.get_cluster_ips()
        for ip in ips:
            _run_command(['/usr/bin/ssh',
                    '-o', 'StrictHostKeyChecking=no',
                    '-o', 'UserKnownHostsFile=/dev/null', ip,
                    'systemctl', "stop", "dhcpd"],
                "Stop dhcpd on " + ip + ".",
                "Unable to stop dhcpd.")
            _run_command(['/usr/bin/scp',
                    '-o', 'StrictHostKeyChecking=no',
                    '-o', 'UserKnownHostsFile=/dev/null',
                    '/etc/dhcp/dhcpd-secondary.conf',
                    ip + ":/etc/dhcp/dhcpd.conf"],
                "Copy dhcpd config file to " + ip + ".",
                "Unable to copy file.")
            _run_command(['/usr/bin/ssh',
                    '-o', 'StrictHostKeyChecking=no',
                    '-o', 'UserKnownHostsFile=/dev/null', ip,
                    'systemctl', "stop", "dhcpd"],
                "Stop dhcpd on " + ip + ".",
                "Unable to stop dhcpd.")
            _run_command(['/usr/bin/ssh',
                    '-o', 'StrictHostKeyChecking=no',
                    '-o', 'UserKnownHostsFile=/dev/null', ip,
                    'rm', "-rf", "/var/lib/dhcpd/dhcpd.*"],
                "Removing lease files on " + ip + ".",
                "Unable to remove.")
            _run_command(['/usr/bin/ssh',
                    '-o', 'StrictHostKeyChecking=no',
                    '-o', 'UserKnownHostsFile=/dev/null', ip,
                    'touch', "/var/lib/dhcpd/dhcpd.leases"],
                "Create lease file on " + ip + ".",
                "Unable to create.")
    _safe_print("Remove lease files")
    try:
        f = open('/var/lib/dhcpd/dhcpd.leases', 'w')
        f.close()
    except:
        pass
    try:
        os.remove('/var/lib/dhcpd/dhcpd.leases~')
    except:
        pass
    _run_command(['/usr/bin/systemctl', 'start', "dhcpd"],
        "Starting local dhcpd.",
        "Unable to start dhcpd. Exit code is non-zero.")
    time.sleep(3)
    if not cluster.is_ha() or args['no_ha']:
        return True
    for ip in ips:
        _run_command(['/usr/bin/ssh',
                '-o', 'StrictHostKeyChecking=no',
                '-o', 'UserKnownHostsFile=/dev/null', ip,
                'systemctl', "start", "dhcpd"],
            "Start dhcpd on " + ip + ".",
            "Unable to start dhcpd.")
    return True



def _run_command(cmd, descr, err):
    _safe_print(descr)
    ssh_proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, close_fds=True)
    streamdata = ssh_proc.communicate()[0]
    if ssh_proc.returncode:
        _safe_print(err)
        sys.exit(1)

#################### OsImage

def osimage_list():
    lst = luna.list('osimage')
    header = ['Name', 'Path', 'Kernel version']
    content = []
    for elem in lst:
        osimage = luna.OsImage(elem)
        content.append([elem, osimage.get('path'), osimage.get('kernver')])
    print_table(header, content)

def osimage_show(out_format = def_format, **args):
    osimage = luna.OsImage(name = args['name'])
    if args['raw']:
        _safe_print(osimage.nice_json)
        return None
    if args['path']:
        _safe_print(osimage.get('path'))
        return None
    if args['grab_filesystems']:
        _safe_print(osimage.get('grab_filesystems'))
        return None
    if args['kernver']:
        for elem in osimage.list_kernels():
            if elem == osimage.get('kernver'):
                _safe_print(elem + ' <=')
                continue
            _safe_print(elem)
        return None
    if args['grab_exclude_list']:
        _safe_print(osimage.get('grab_exclude_list'))
        return None
    out_json = osimage.show()
    out_str = ''
    header = ['Parameter', 'Value']
    content = []
    name = out_json.pop('name')
    content.append(['name', name])
    for key in sorted(out_json):
        content.append([key, out_json[key]])
    print_table(header, content)

def osimage_listkerns(name):
    osimage = luna.OsImage(name = name)
    for elem in osimage.list_kernels():
        _safe_print(elem)

def osimage_add(**args):
    check_active_node()
    args['create'] = True
    if not bool(args['kernver']):
        args['kernver'] = 'ANY'
    osimage = luna.OsImage(**args)

def osimage_delete(name):
    check_active_node()
    osimage = luna.OsImage(name)
    osimage.delete()

def osimage_change(**args):
    osimage = luna.OsImage(args['name'])
    args.pop('name')
    if args['grab_exclude_list']:
        old_list = osimage.get('grab_exclude_list')
        new_list = _edit_script(old_list)
        osimage.set('grab_exclude_list', new_list)
        return None
    for key in args:
        if not args[key]:
            continue
        osimage.set(key, args[key])

def osimage_pack(**args):
    check_active_node()
    def pack_image(osimage):
        try:
            _safe_print('Creating tarball.')
            res = osimage.create_tarball()
            _safe_print('Done.')
        except:
            return None
        try:
            _safe_print('Creating torrent.')
            res = osimage.create_torrent()
            _safe_print('Done.')
        except:
            return None
        return True

    def pack_boot(osimage, copy):
        if not copy:
           _safe_print('Copying kernel & packing inirtd.')
           osimage.pack_boot()
        else:
            _safe_print('Copying kernel and initrd from image.')
            osimage.copy_boot()
        _safe_print('Done.')

    def update_ltorrent():
        try:
            pf = open(luna.Cluster().get('torrent_pidfile'), 'r')
            pid = int(pf.read().strip())
            pf.close()
        except IOError:
            pid = None
        if pid:
            try:
                os.kill(pid, signal.SIGHUP)
            except OSError:
                _safe_print("No such process with pid %i. Is ltorrent running?" % pid)
        else:
            _safe_print("Ltorrent is not running")


    osimage = luna.OsImage(args['name'])
    if args['boot']:
        pack_boot(osimage, args['copy_boot'])
        update_ltorrent()
        return True
    if args['image']:
        pack_image(osimage)
        return True
    pack_image(osimage)
    pack_boot(osimage, args['copy_boot'])
    update_ltorrent()
    osimage_sync(args['name'])
    return True

def osimage_grab(**args):
    osimage = luna.OsImage(args['name'])
    res = osimage.grab_host(host = args['host'],
        dry_run = args['dry_run'],
        verbose = args['verbose'])
    return res

def osimage_sync(name):
    check_active_node()
    cluster = luna.Cluster()
    if not cluster.is_ha():
        return True
    lunapath = cluster.get("path")
    osimage = luna.OsImage(name)
    osimagepath = osimage.get("path")
    initrdfile = lunapath + "/boot/" + osimage.get("initrdfile")
    kernfile = lunapath + "/boot/" + osimage.get("kernfile")
    tarball = lunapath + "/torrents/" + osimage.get("tarball") + ".tgz"
    torrent = lunapath + "/torrents/" + osimage.get("torrent") + ".torrent"
    ips = cluster.get_cluster_ips()
    for ip in ips[1:]:
        for path in (osimagepath, initrdfile, kernfile, tarball, torrent):
            _safe_print("%s:%s => %s:%s" % (ips[0], path, ip, path))
            utils.helpers.rsync_data(ip, path)
        _safe_print("Reloading ltorrent on " + ip)
        ssh_proc = subprocess.Popen(['/usr/bin/ssh',
            '-o', 'StrictHostKeyChecking=no',
            '-o', 'UserKnownHostsFile=/dev/null', ip,
            '/usr/sbin/ltorrent', "reload"], stdout=subprocess.PIPE, close_fds=True)
        streamdata = ssh_proc.communicate()[0]
        if ssh_proc.returncode:
            _safe_print("Exit code is non-zero")
            sys.exit(1)
    _safe_print("Done.")
    return True

def osimage_clone(**args):
    check_active_node()
    osimage = luna.OsImage(args['name'])
    # check if osimage we need to create exists already
    lst = luna.list('osimage')
    if args['to'] in lst:
        sys.stderr.write("OsImage {} already exists.\n".format(args['to']) )
        sys.exit(1)
    osimagepath = osimage.get("path")
    targetpath = os.path.abspath(args['path'])
    if os.path.exists(targetpath):
        sys.stderr.write("Path {} already exists.\n".format(targetpath) )
        sys.exit(1)
    _safe_print("%s => %s" % (osimagepath, targetpath))
    utils.helpers.clone_dirs(osimagepath, targetpath)
    # create osimage
    newosimage = luna.OsImage(name = args['to'],
        create = True,
        path = targetpath,
        kernver = osimage.get('kernver'))
    # copy params
    for param in ['dracutmodules', 'kernmodules', 'kernopts', 'grab_filesystems', 'grab_exclude_list']:
        newosimage.set(param, osimage.get(param))
    return True

def osimage_rename(**args):
    check_active_node()
    osimage = luna.OsImage(args['name'])
    osimage.rename(args['newname'])


#################### BMCSetup

def bmcsetup_list():
    lst = luna.list('bmcsetup')
    header = ['Name', 'User', 'Password']
    content = []
    for elem in lst:
        bmcsetup = luna.BMCSetup(elem)
        content.append([elem, bmcsetup.get('user'), bmcsetup.get('password')])
    print_table(header, content)

def bmcsetup_show(name, raw, out_format = def_format):
    bmcsetup = luna.BMCSetup(name = name)
    if raw:
        _safe_print(bmcsetup.nice_json)
        return None
    out_json = bmcsetup.show()
    header = ['Parameter', 'Value']
    content = []
    name = out_json.pop('name')
    content.append(['name', name])
    for key in sorted(out_json):
        content.append([key, out_json[key]])
    print_table(header, content)

def bmcsetup_add(**args):
    check_active_node()
    args['create'] = True
    bmcsetup = luna.BMCSetup(**args)

def bmcsetup_change(**args):
    check_active_node()
    bmcsetup = luna.BMCSetup(args['name'])
    args.pop('name')
    for key in args:
        if not args[key]:
            continue
        bmcsetup.set(key, args[key])

def bmcsetup_delete(name):
    check_active_node()
    bmcsetup = luna.BMCSetup(name)
    bmcsetup.delete()

def bmcsetup_rename(**args):
    check_active_node()
    bmcsetup = luna.BMCSetup(args['name'])
    bmcsetup.rename(args['newname'])

#################### Network

def network_list():
    networks = luna.list('network')
    header = ['Name', 'Network']
    content = []
    for elem in networks:
        net = luna.Network(elem)
        content.append([elem, net.get('NETWORK') + "/" + str(net.get('PREFIX'))])
    print_table(header, content)

def network_show(name, raw, reservedips, out_format = '%20s%60s\n'):
    net = luna.Network(name = name)
    if raw:
        _safe_print(net.nice_json)
        return None
    if reservedips:
        nonfree = utils.freelist.get_nonfree(net['freelist'])
        ips = [utils.ip.reltoa(net['NETWORK'], elem) for elem in nonfree]
        _safe_print("\n".join(["%s" % i for i in ips ]))
        return None
    out_json = net.show()
    header = ['Parameter', 'Value']
    content = []
    content.append(['name', name])
    out_json.pop('freelist')
    out_json.pop('name')
    out_json['NETWORK'] = net.get('NETWORK')
    out_json['ns_ip'] = net.get('ns_ip')
    for key in sorted(out_json):
        content.append([key, out_json[key]])
    print_table(header, content)

def network_add(name, network, prefix, ns_hostname, ns_ip):
    check_active_node()
    net = luna.Network(name = name, create = True, NETWORK = network, PREFIX = prefix, ns_hostname = ns_hostname, ns_ip = ns_ip)

def network_change(name, network, prefix, reserve, release, ns_hostname, ns_ip):
    check_active_node()
    net = luna.Network(name = name)
    if bool(network):
        net.set('NETWORK', network)
    if bool(prefix):
        net.set('PREFIX', prefix)
    if bool(reserve):
        net.reserve_ip(reserve)
    if bool(release):
        net.release_ip(release)
    if bool(ns_hostname):
        net.set('ns_hostname', ns_hostname)
    if bool(ns_ip):
        net.set('ns_ip', ns_ip)
    return None

def network_delete(name):
    check_active_node()
    net = luna.Network(name)
    net.delete()

def network_rename(**args):
    check_active_node()
    net = luna.Network(args['name'])
    net.rename(args['newname'])

#################### Group

def group_list():
    groups = luna.list('group')
    header = ['Name', 'Osimage', 'Interfaces']
    content = []
    for elem in groups:
        group = luna.Group(elem)
        # dirty and ugly, but pyton-ish
        bmcnet = group.show_bmc_if(brief = True)
        interfaces = "BMC:" + str(bmcnet if bmcnet else None)
        for k in group.show()['interfaces'].keys():
            brief_if = group.show_if(k, brief = True)
            if bool(brief_if):
                interfaces += ", %s:%s" % (k, brief_if)
            else:
                interfaces += ", %s:%s" % (k, None)

        content.append([elem, group.show()['osimage'], interfaces])
    print_table(header, content)

def group_show(out_format = '%20s%60s\n', **args):
    group = luna.Group(name = args['name'])
    if args['raw']:
        _safe_print(group.nice_json)
        return None
    if bool(args['interface']):
        _safe_print(group.show_if(args['interface']))
        return None
    elif bool(args['bmcnetwork']):
        _safe_print(group.show_bmc_if())
        return None
    scr_type =''
    if bool(args['prescript']):
        scr_type = 'prescript'
    elif bool(args['partscript']):
        scr_type = 'partscript'
    elif bool(args['postscript']):
        scr_type = 'postscript'
    if scr_type:
        _safe_print(group.show()[scr_type])
        return None
    if bool(args['osimage']):
        _safe_print(group.show()['osimage'])
        return None
    if bool(args['bmcsetup']):
        _safe_print(group.show()['bmcsetup'])
        return None
    out_json = group.show()
    grpname = out_json.pop('name')
    bmcnet = group.show_bmc_if(brief = True)

    interfaces = "BMC:" + str(bmcnet if bmcnet else None) + ", "
    interfaces += ", ".join(["%s:%s" % (k, group.show_if(k, brief = True) if group.show_if(k) else None) for k in group.show()['interfaces'].keys()])
    out_json['interfaces'] = interfaces
    header = ['Parameter', 'Value']
    content = []
    content.append(['name', grpname])
    for key in sorted(out_json):
        content.append([key, out_json[key]])
    print_table(header, content)

def group_add(**args):
    check_active_node()
    args['create'] = True
    args['interfaces'] = args['interface']
    args.pop('interface')
#    try:
#        interface_list  = args.pop('interface')
#        args['interfaces'] = dict( i.split(':') for i in interface_list)
#    except:
#        logger.error('Error parsing interface parameters.')
#        return None
    group = luna.Group(**args)

def group_change(**args):
    check_active_node()
    parm_sum = 0
    for elem in ['prescript', 'postscript', 'partscript', 'interface']:
        parm_sum += int(bool(args[elem]))
    if parm_sum > 1 and args['edit']:
        logger.error('Only one element can be edited')
        return None
    #if args['interface'] == 'BMC':
    #    args['interface'] = None
    #    args['bmcnetwork'] = True
    group = luna.Group(args['name'])
    if bool(args['interface']):
        if bool(args['add']):
            group.add_interface(args['interface'])
        elif bool(args['delete']):
            group.del_interface(args['interface'])
        elif bool(args['setnet']):
            group.set_net_to_if(args['interface'], args['setnet'])
        elif bool(args['delnet']):
            group.del_net_from_if(args['interface'])
        elif args['edit']:
            group.set_if_parms(args['interface'], _edit_script(group.get_if_parms(args['interface'])))
        else:
            _safe_print(group.show_if(args['interface']))
    elif bool(args['bmcnetwork']):
        if bool(args['setnet']):
            group.set_bmcnetwork(args['setnet'])
        elif bool(args['delnet']):
            group.del_bmcnetwork()
        else:
            _safe_print(group.show_bmc_if())
    if type(args['boot_if']) == type(''):
        group.set('boot_if', args['boot_if'])
    if type(args['torrent_if']) == type(''):
        group.set('torrent_if', args['torrent_if'])
    if bool(args['osimage']):
        group.osimage(args['osimage'])
    if bool(args['bmcsetup']) or args['bmcsetup'] == '':
        group.bmcsetup(args['bmcsetup'])
    if bool(args['prescript']):
        scr_type = 'prescript'
    elif bool(args['partscript']):
        scr_type = 'partscript'
    elif bool(args['postscript']):
        scr_type = 'postscript'
    else:
        return None
    old_script = group.show()[scr_type]
    if not args['edit']:
        _safe_print(old_script)
        return None
    script = _edit_script(old_script)
    if not bool(script):
        script = ''
    group.set(scr_type, script)

def _edit_script(old_script):
    # old_script can be None
    if not bool(old_script):
        old_script = ''
    script = ''
    if not sys.stdin.isatty():
        for line in sys.stdin:
            script += line
    else:
        EDITOR = os.environ.get('EDITOR','vi')
        tmpfile = tempfile.NamedTemporaryFile(suffix=".tmp")
        tmpfile.write(old_script)
        tmpfile.flush()
        subprocess.call([EDITOR, '+":set syn=sh"', tmpfile.name])
        tmpfile.file.seek(0)
        for line in tmpfile.file.readlines():
            script += line
    return script

def group_delete(name):
    check_active_node()
    group = luna.Group(name)
    group.delete()

def group_rename(**args):
    check_active_node()
    grp = luna.Group(args['name'])
    grp.rename(args['newname'])

#################### Node

def node_list():
    global mongo_db
    nodes = luna.list('node')
    header = ['Name', 'Group', 'MAC', 'IPs']
    content = []
    for elem in nodes:
        ips = ''
        node = luna.Node(elem, mongo_db = mongo_db)
        out_json = node.show()
        interfaces = node.get_interfaces()
        bmcip = node.get_human_bmc_ip()
        group = out_json['group']
        mac = node.get_mac()
        if_str = ''
        for interface in interfaces:
            ip = node.get_human_ip(interface)
            if_str += '%s:%s, ' % (interface, ip)
        if_str += '%s:%s' % ('BMC', bmcip)
        content.append([elem, group, mac, if_str])
    print_table(header, content)

def node_show(name, raw, out_format = '%20s%60s\n'):
    global mongo_db
    for nodename in hostlist.expand_hostlist(name):
        node = luna.Node(name = nodename, mongo_db = mongo_db)
        if raw:
            _safe_print(node.nice_json)
            return None
        out_json = node.show()
        curent_node_name = out_json.pop('name')
        status = node.get_status()
        if status:
            out_json['status'] = "%s - %s" % (status['status'], status['time'])
        bmcip = node.get_human_bmc_ip()
        if_str = ''
        interfaces = node.get_interfaces()
        for interface in interfaces:
            ip = node.get_human_ip(interface)
            if_str += '%s:%s, ' % (interface, ip)
        out_json['interfaces'] = if_str.rstrip(', ')
        out_json['bmcnetwork'] = bmcip
        out_json['mac'] = node.get_mac()
        header = ['Parameter', 'Value']
        content = []
        content.append(['name', curent_node_name])
        out_str = ''
        for key in sorted(out_json):
            content.append([key, out_json[key]])
        print_table(header, content)

def node_add(name, group):
    check_active_node()
    if name:
        for nodename in hostlist.expand_hostlist(name):
            node = luna.Node(name = nodename, group = group, create = True)
    else:
        node = luna.Node(name = name, group = group, create = True)

def node_change(**args):
    check_active_node()
    for nodename in hostlist.expand_hostlist(args['name']):
        node = luna.Node(nodename, mongo_db = mongo_db)
        if bool(args['interface']):
            node.change_ip(args['interface'][0], args['interface'][1])
        if bool(args['group']):
            node.change_group(args['group'])
        if bool(args['bmcip']):
            node.change_bmc_ip(args['bmcip'])
        if args['mac'] == '':
            node.clear_mac()
        if bool(args['mac']):
            node.set_mac(args['mac'].lower())
        if args['switch'] == '':
            node.clear_switch()
        if args['port'] == '':
            node.clear_port()
        if bool(args['switch']):
            node.set_switch(args['switch'])
        if bool(args['port']):
            node.set_port(args['port'])
        if bool(args['localboot']):
            flag = False
            if args['localboot'] == 'y':
                flag = True
            node.set('localboot', flag)
        if bool(args['setupbmc']):
            flag = False
            if args['setupbmc'] == 'y':
                flag = True
            node.set('setupbmc', flag)
        if bool(args['service']):
            flag = False
            if args['service'] == 'y':
                flag = True
            node.set('service', flag)

def node_delete(name):
    check_active_node()
    for nodename in hostlist.expand_hostlist(name):
        node = luna.Node(nodename, mongo_db = mongo_db)
        node.delete()

def node_rename(**args):
    check_active_node()
    node = luna.Node(args['name'])
    node.rename(args['newname'])

#################### Switch

def switch_list():
    switches = luna.list('switch')
    header =  ['Name', 'IP']
    content = []
    for elem in switches:
        switch = luna.Switch(elem)
        content.append([elem, switch.get('ip')])
    print_table(header, content)

def switch_show(name, raw, out_format = def_format):
    for switchname in hostlist.expand_hostlist(name):
        switch = luna.Switch(name = switchname)
        if raw:
            _safe_print(switch.nice_json)
            return None
        out_json = switch.show()
        out_json['ip'] = switch.get('ip')
        header = ['Parameter', 'Value']
        content = []
        content.append(['name', out_json.pop('name')])
        for key in sorted(out_json):
            content.append([key, out_json[key]])
        print_table(header, content)

def switch_add(**args):
    check_active_node()
    name = args.pop('name')
    args['create'] = True
    for switchname in hostlist.expand_hostlist(name):
        args['name'] = switchname
        switch = luna.Switch(**args)

def switch_change(**args):
    check_active_node()
    for switchname in hostlist.expand_hostlist(args['name']):
        switch = luna.Switch(switchname)
        args.pop('name')
        for key in args:
            if not args[key]:
                continue
            switch.set(key, args[key])

def switch_delete(name):
    check_active_node()
    for switchname in hostlist.expand_hostlist(name):
        switch = luna.Switch(switchname)
        switch.delete()

def switch_rename(**args):
    check_active_node()
    sw = luna.Switch(args['name'])
    sw.rename(args['newname'])

#################### Otherdev

def otherdev_list():
    devs = luna.list('otherdev')
    header = ['Name', 'IPs']
    content = []
    for elem in devs:
        dev = luna.OtherDev(elem)
        ips = []
        for net in dev.list_nets():
            ips.append("[" + net + "]:" + dev.get_ip(net))
        content.append([elem, ', '.join(ips)])
    print_table(header, content)

def otherdev_show(name, raw, out_format = def_format):
    for devname in hostlist.expand_hostlist(name):
        dev = luna.OtherDev(name = devname)
        if raw:
            _safe_print(dev.nice_json)
            return None
        ips = []
        for net in dev.list_nets():
            ips.append("[" + net + "]:" + dev.get_ip(net))
        out_json = dev.show()
        out_json['connected'] = ', '.join(ips)
        header = ['Parameter', 'Value']
        content = []
        content.append(['name', out_json.pop('name')])
        for key in sorted(out_json):
            content.append([key, out_json[key]])
        print_table(header, content)

def otherdev_add(**args):
    check_active_node()
    name = args.pop('name')
    args['create'] = True
    for otherdev in hostlist.expand_hostlist(name):
        args['name'] = otherdev
        dev = luna.OtherDev(**args)

def otherdev_change(**args):
    check_active_node()
    for devname in hostlist.expand_hostlist(args['name']):
        dev = luna.OtherDev(devname)
        args.pop('name')
        dev.set_ip(network = args['network'], ip = args['ip'])

def otherdev_delete(name):
    check_active_node()
    for devname in hostlist.expand_hostlist(name):
        dev = luna.OtherDev(devname)
        dev.delete()

def otherdev_rename(**args):
    check_active_node()
    otherdev = luna.OtherDev(args['name'])
    otherdev.rename(args['newname'])

parser = argparse.ArgumentParser(prog='luna',description='Manage Luna Cluster.')
luna_subparsers = parser.add_subparsers(help='Items to operate.', dest='item')

# Cluster
cluster_parser = luna_subparsers.add_parser('cluster', help='Basic cluster operations.')
cluster_parser_actions = cluster_parser.add_subparsers(dest='action')
# show
cluster_command = cluster_parser_actions.add_parser('show',help='Show options.')
cluster_command.add_argument('--raw', '-R', action='store_true', help='Raw JSON output')
# init
cluster_command = cluster_parser_actions.add_parser('init', help='Create Luna Cluster.')
cluster_command.add_argument('--nodeprefix', '--prefix', type=str, help='Auto-prefix for new nodes.', default='node')
cluster_command.add_argument('--nodedigits', '--digits', type=int, help='Zero-autopadding', default=3)
cluster_command.add_argument('--user', type=str, help='Username for running services.', default='luna')
cluster_command.add_argument('--path', type=str, help='Path to store files.', default='/opt/luna')

# change
cluster_command = cluster_parser_actions.add_parser('change',help='Change cluster options')
cluster_command.add_argument('--nodeprefix', '--prefix', '-p', type=str, help='Auto-prefix for new nodes.')
cluster_command.add_argument('--nodedigits', '--digits', '-d', type=int, help='Zero-autopadding')
cluster_command.add_argument('--path', type=str, help='Path to store files.')
cluster_command.add_argument('--user', type=str, help='Username for running services.')
cluster_command.add_argument('--frontend_address', type=str, help='Server address')
cluster_command.add_argument('--frontend_port', type=int, help='Server address')
cluster_command.add_argument('--server_port', type=int, help='Server port')
###cluster_command.add_argument('--tracker_address', type=str, help='Torrent tracker address')
###cluster_command.add_argument('--tracker_port', type=int, help='Torrent tracker port')
cluster_command.add_argument('--tracker_interval', type=int, help='Torrent tracker announce interval')
cluster_command.add_argument('--tracker_min_interval', type=int, help='Torrent tracker announce min interval')
cluster_command.add_argument('--tracker_maxpeers', type=int, help='Torrent tracker max allowed peers')
cluster_command.add_argument('--torrent_listen_port_min', type=int, help='Torrent client listening port min')
cluster_command.add_argument('--torrent_listen_port_max', type=int, help='Torrent client listening port max')
cluster_command.add_argument('--torrent_pidfile', type=str, help='Torrent pidfile')
cluster_command.add_argument('--lweb_num_proc', type=int, help='Lweb number of processes. (0 for autodetection.)')
cluster_command.add_argument('--lweb_pidfile', type=int, help='Lweb pidfile')
cluster_command.add_argument('--cluster_ips', type=str, metavar='A.A.A.A,B.B.B.B', help='IPs of the cluster interfaces dedicated for provisioninig')
cluster_command.add_argument('--named_include_file', type=str, help='Include file for named.conf')
cluster_command.add_argument('--named_zone_dir', type=str, help='Named\'s directory for storing zone files')
#cluster_command.add_argument('--tracker_clean', action='store_true', help='Clean database from outdated records')
# sync
cluster_command = cluster_parser_actions.add_parser('sync',help='Synchronize cluster arcoss nodes.')
# makedns
cluster_command = cluster_parser_actions.add_parser('makedns',help='Create config and zone files for named.')
# makedhcp
cluster_command = cluster_parser_actions.add_parser('makedhcp',help='Create config and zone files for named.')
cluster_command.add_argument('--no_ha', action='store_true', help='Create high availa')
cluster_command.add_argument('--network', '-N', required=True, type=str, help='Name of network definition.')
cluster_command.add_argument('--start_ip', '-s', required=True, type=str, help='First ip in dynamic range.')
cluster_command.add_argument('--end_ip', '-e', required=True, type=str, help='Last ip in dynamic range.')
# delete
cluster_command = cluster_parser_actions.add_parser('delete',help='Delete Luna Cluster.')

# OsImage
osimage_parser = luna_subparsers.add_parser('osimage', help='OsImage operations.')
osimage_parser_actions = osimage_parser.add_subparsers(dest='action')
# list
osimage_command = osimage_parser_actions.add_parser('list', help='List OsImages.')
# show
osimage_command = osimage_parser_actions.add_parser('show', help='Show OsImage.')
osimage_command.add_argument('--name', '-n', required=True, type=str, help='Name of the OsImage.')
osimage_command_group = osimage_command.add_mutually_exclusive_group()
osimage_command_group.add_argument('--raw', '-R', action='store_true', help='Raw JSON output')
osimage_command_group.add_argument('--path', '-p', action='store_true', help='Show path to OsImage.')
osimage_command_group.add_argument('--kernver', '-k', action='store_true', help='Show kernel versions.')
osimage_command_group.add_argument('--kernopts', '-o', action='store_true', help='Show kernel options.')
osimage_command_group.add_argument('--grab_exclude_list', '-e', action='store_true', help='Show exclude list for grabbing host.')
osimage_command_group.add_argument('--grab_filesystems', '-f', action='store_true', help='Show filesystems to grab from host.')
# add
osimage_command = osimage_parser_actions.add_parser('add', help='Add osimage.')
osimage_command.add_argument('--name', '-n', required=True, type=str, help='Name of the OsImage.')
osimage_command.add_argument('--path', '-p', required=True, type=str, help='Path to OsImage.')
osimage_command.add_argument('--kernver', '-k', type=str, help='Kernel version. Can be "ANY" keyword (will be used when parameter is ommited).')
osimage_command.add_argument('--kernopts', '-o', type=str, help='Kernel options.')
# change
osimage_command = osimage_parser_actions.add_parser('change', help='Change OsImage.')
osimage_command.add_argument('--name', '-n', required=True, type=str, help='Name of the OsImage.')
osimage_command_group = osimage_command.add_mutually_exclusive_group()
####osimage_command_group.add_argument('--path', '-p', type=str, help='Path to osimage.')
osimage_command_group.add_argument('--kernver', '-k', type=str, help='Kernel version.')
osimage_command_group.add_argument('--kernopts', '-o', type=str, help='Kernel options.')
osimage_command_group.add_argument('--dracutmodules', '-d', type=str, help='Dracut modules')
osimage_command_group.add_argument('--kernmodules', '-m', type=str, help='Kernel modules (drivers)')
osimage_command_group.add_argument('--grab_exclude_list', '-e', action='store_true', help='Change exclude list for grabbing host.')
osimage_command_group.add_argument('--grab_filesystems', '-f', type=str, help='Comma-separated filesystems to grab from host.')
# pack
osimage_command = osimage_parser_actions.add_parser('pack', help='Pack OsImage.')
osimage_command.add_argument('--name', '-n', required=True, type=str, help='Name of the OsImage.')
osimage_command_group = osimage_command.add_mutually_exclusive_group(required=False)
osimage_command_group.add_argument('--image', '-i', action='store_true', help='Pack image only.')
osimage_command_group.add_argument('--boot', '-b', action='store_true', help='Pack kernel and initrd only.')
osimage_command.add_argument('--copy_boot', '-c', action='store_true', help='Copy kernel and initrd from image, not to run dracut.')
# grab
osimage_command = osimage_parser_actions.add_parser('grab', help='Grab host to OsImage.')
osimage_command.add_argument('--name', '-n', required=True, type=str, help='Name of the OsImage.')
osimage_command.add_argument('--host', '-H', required=True, type=str, help='Hostname of the source node.')
osimage_command.add_argument('--dry_run', '-d', action='store_true', help='Do not change osimage. Report only.')
osimage_command.add_argument('--verbose', '-v', action='store_true', help='Print rsync output.')
# sync
osimage_command = osimage_parser_actions.add_parser('sync', help='Sync OsImage.')
osimage_command.add_argument('--name', '-n', required=True, type=str, help='Name of the OsImage.')
# clone
osimage_command = osimage_parser_actions.add_parser('clone', help='Clone OsImage.')
osimage_command.add_argument('--name', '-n', required=True, type=str, help='Name of the OsImage.')
osimage_command.add_argument('--to', '-t', required=True, type=str, help='Name of the OsImage to create.')
osimage_command.add_argument('--path', '-p', required=True, type=str, help='Path of the Osimage to create.')
# rename
osimage_command = osimage_parser_actions.add_parser('rename', help='Rename OsImage.')
osimage_command.add_argument('--name', '-n', required=True, type=str, help='Name of the OsImage.')
osimage_command.add_argument('--newname', '--nn', required=True, type=str, help='New name of the OsImage.')
# delete
osimage_command = osimage_parser_actions.add_parser('delete', help='Delete OsImage.')
osimage_command.add_argument('--name', '-n', required=True, type=str, help='Name of the OsImage.')

# BMCSetup
bmcsetup_parser = luna_subparsers.add_parser('bmcsetup', help='BMCSetup instance operations.')
bmcsetup_parser_actions = bmcsetup_parser.add_subparsers(dest='action')
# list
bmcsetup_command = bmcsetup_parser_actions.add_parser('list', help='List BMCSetup instances.')
# show
bmcsetup_command = bmcsetup_parser_actions.add_parser('show', help='Show BMCSetup instance.')
bmcsetup_command.add_argument('--name', '-n', required=True, type=str, help='Name of the BMCSetup instance.')
bmcsetup_command.add_argument('--raw', '-R', action='store_true', help='Raw JSON output')
# add
bmcsetup_command = bmcsetup_parser_actions.add_parser('add', help='Add BMCSetup instance.')
bmcsetup_command.add_argument('--name', '-n', required=True, type=str, help='Name of the BMCSetup instance.')
bmcsetup_command.add_argument('--user', '-u', type=str, help='User name', default='ladmin')
bmcsetup_command.add_argument('--password', '-p', type=str, help='Password', default='ladmin')
bmcsetup_command.add_argument('--userid', '-I', type=int, help='UserID', default=3)
bmcsetup_command.add_argument('--netchannel', '-N', type=int, help='Netchannel', default=1)
bmcsetup_command.add_argument('--mgmtchannel', '-M', type=int, help='Mgmtchannel', default=1)
# change
bmcsetup_command = bmcsetup_parser_actions.add_parser('change', help='Change BMCSetup instance.')
bmcsetup_command.add_argument('--name', '-n', required=True, type=str, help='Name of the BMCSetup instance.')
bmcsetup_command.add_argument('--user', '-u', type=str, help='User name')
bmcsetup_command.add_argument('--password', '-p', type=str, help='Password')
bmcsetup_command.add_argument('--userid', '-I', type=int, help='UserID')
bmcsetup_command.add_argument('--netchannel', '-N', type=int, help='Netchannel')
bmcsetup_command.add_argument('--mgmtchannel', '-M', type=int, help='Mgmtchannel')
# rename
bmcsetup_command = bmcsetup_parser_actions.add_parser('rename', help='Rename BMCSetup instance.')
bmcsetup_command.add_argument('--name', '-n', required=True, type=str, help='Name of the BMCSetup instance.')
bmcsetup_command.add_argument('--newname', '--nn', required=True, type=str, help='New name of the BMCSetup instance.')
# delete
bmcsetup_command = bmcsetup_parser_actions.add_parser('delete', help='Delete osimage.')
bmcsetup_command.add_argument('--name', '-n', required=True, type=str, help='Name of the BMCSetup instance.')
"""
# IfCfg
ifcfg_parser = luna_subparsers.add_parser('ifcfg', help='IfCfg operations.')
ifcfg_parser_actions = ifcfg_parser.add_subparsers(dest='action')
# list
ifcfg_command = ifcfg_parser_actions.add_parser('list', help='List IfCfg instances.')
# show
ifcfg_command = ifcfg_parser_actions.add_parser('show', help='Show IfCfg instance.')
ifcfg_command.add_argument('--name', '-n', required=True, type=str, help='Name of the IfCfg instance.')
ifcfg_command.add_argument('--raw', '-R', action='store_true', help='Raw JSON output')
# add
ifcfg_command = ifcfg_parser_actions.add_parser('add', help='Add IfCfg instance.')
ifcfg_command.add_argument('--name', '-n', required=True, type=str, help='Name of the IfCfg instance.')
# change
ifcfg_command = ifcfg_parser_actions.add_parser('change', help='Change IfCfg instance.')
ifcfg_command.add_argument('--name', '-n', required=True, type=str, help='Name of the IfCfg instance.')
# delete
ifcfg_command = ifcfg_parser_actions.add_parser('delete', help='Delete IfCfg instance.')
ifcfg_command.add_argument('--name', '-n', required=True, type=str, help='Name of the IfCfg instance.')
"""
# Network
network_parser = luna_subparsers.add_parser('network', help='Node operations.')
network_parser_actions = network_parser.add_subparsers(dest='action')
# list
network_command = network_parser_actions.add_parser('list', help='List Networks.')
# show
network_command = network_parser_actions.add_parser('show', help='Show Network.')
network_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Network.')
network_command.add_argument('--raw', '-R', action='store_true', help='Raw JSON output')
network_command.add_argument('--reservedips', '-r', action='store_true', help='List reserved IPs.')
# add
network_command = network_parser_actions.add_parser('add', help='Add Network.')
network_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Network.')
network_command.add_argument('--network', '-N', metavar='N.N.N.N', required=True, type=str, help='Network.')
network_command.add_argument('--prefix', '-P', metavar='PP', required=True, type=int, help='Prefix.')
network_command.add_argument('--ns_hostname', type=str, help='Name server for zone file.')
network_command.add_argument('--ns_ip', metavar='N.N.N.N', type=str, help='Name server\'s IP for zone file.')
# change
network_command = network_parser_actions.add_parser('change', help='Change Network.')
network_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Network.')
network_command.add_argument('--network', '-N', metavar='N.N.N.N', type=str, help='Network.')
network_command.add_argument('--prefix', '-P', metavar='PP', type=int, help='Prefix.')
network_command.add_argument('--reserve', '-R', metavar='X.X.X.X', type=str, help='Reserve IP.')
network_command.add_argument('--release', metavar='X.X.X.X', type=str, help='Release IP.')
network_command.add_argument('--ns_hostname', type=str, help='Name server for zone file.')
network_command.add_argument('--ns_ip', metavar='N.N.N.N', type=str, help='Name server\'s IP for zone file.')
# rename
network_command = network_parser_actions.add_parser('rename', help='Rename Network.')
network_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Network.')
network_command.add_argument('--newname', '--nn', required=True, type=str, help='New name of the Network.')
# delete
network_command = network_parser_actions.add_parser('delete', help='Delete Network.')
network_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Network.')


# Group
group_parser = luna_subparsers.add_parser('group', help='Group operations.')
group_parser_actions = group_parser.add_subparsers(dest='action')
# list
group_command = group_parser_actions.add_parser('list', help='List Groups.')
# show
group_command = group_parser_actions.add_parser('show', help='Show Group.')
group_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Group.')
group_command_group = group_command.add_mutually_exclusive_group()
group_command_group.add_argument('--raw', '-R', action='store_true', help='Raw JSON output')
group_command_group.add_argument('--osimage', '-o', action='store_true', help='Osimage assigned to Group.')
group_command_group.add_argument('--prescript', '--pre', action='store_true', help='Set prescript.')
group_command_group.add_argument('--postscript', '--post', action='store_true', help='Set postscript.')
group_command_group.add_argument('--partscript', '--part', action='store_true', help='Set partition script. Localdisk should be mounted under /sysimage')
group_command_group.add_argument('--bmcsetup', '-b', action='store_true', help='BMCSetup assigned to Group.')
group_command_group.add_argument('--interface', '-i', type=str, help='Interface.')
group_command_group.add_argument('--bmcnetwork', '--bn', action='store_true',  help='Network for BMC.')
# add
group_command = group_parser_actions.add_parser('add', help='Add Group.')
group_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Group.')
group_command.add_argument('--osimage', '-o', required=True, type=str, help='Osimage assigned to Group.')
group_command.add_argument('--bmcsetup', '-b', type=str, help='BMCSetup assigned to Group.')
group_command.add_argument('--bmcnetwork', '--bn', type=str, help='Network for BMC.')
group_command.add_argument('--interface', '-i', action='append', required=True, type=str, help='Interfaces specified in format -i eth0 -i eth1')
# change
group_command = group_parser_actions.add_parser('change', help='Change Group.')
group_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Group.')
group_command.add_argument('--osimage', '-o', type=str, help='Osimage assigned to Group.')
group_command.add_argument('--prescript', '--pre', action='store_true', help='Set prescript.')
group_command.add_argument('--postscript', '--post', action='store_true', help='Set postscript.')
group_command.add_argument('--partscript', '--part', action='store_true', help='Set partition script. Localdisk should be mounted under /sysimage')
group_command.add_argument('--bmcsetup', '-b', type=str, help='BMCSetup assigned to Group.')
group_command.add_argument('--boot_if', '--bi', type=str, help='Boot interface')
group_command.add_argument('--torrent_if', '--ti', type=str, help='High-speed interface')
group_command_group = group_command.add_mutually_exclusive_group()
group_command_group.add_argument('--interface', '-i', type=str, help='Interface.')
group_command_group.add_argument('--bmcnetwork', '--bn', action='store_true',  help='Network for BMC.')

#group_command.add_argument('--interface', '-i', type=str, help='Interface. Can be \'-i eth0\' or \'-i BMC\'')
group_command.add_argument('--add', '-A', action='store_true', help='Add interface.')
group_command.add_argument('--delete', '-D', action='store_true', help='Delete interface.')
group_command.add_argument('--setnet', '--sn', type=str, metavar='NETWORK', help='Set Network for interface or for BMC')
group_command.add_argument('--delnet', '--dn', action='store_true', help='Delete Network for interface or for BMC')
group_command.add_argument('--edit', '-e', action='store_true', help='Edit interface parameters or edit scripts')
# rename
group_command = group_parser_actions.add_parser('rename', help='Rename Group.')
group_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Group.')
group_command.add_argument('--newname', '--nn', required=True, type=str, help='New name of the Group.')
# delete
group_command = group_parser_actions.add_parser('delete', help='Delete Group.')
group_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Group.')


# Node
node_parser = luna_subparsers.add_parser('node', help='Node operations.')
node_parser_actions = node_parser.add_subparsers(dest='action')
# list
node_command = node_parser_actions.add_parser('list', help='List Nodes.')
# show
node_command = node_parser_actions.add_parser('show', help='Show Node.')
node_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Node.')
node_command.add_argument('--raw', '-R', action='store_true', help='Raw JSON output.')
# add
node_command = node_parser_actions.add_parser('add', help='Add Node.')
node_command.add_argument('--name', '-n', type=str, help='Name of the Node.')
node_command.add_argument('--group', '-g', required=True, type=str, help='Group.')
# change
node_command = node_parser_actions.add_parser('change', help='Change Node.')
node_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Node.')
node_command_group = node_command.add_mutually_exclusive_group(required=False)
node_command_group.add_argument('--group', '-g', type=str, help='Group.')
node_command_group.add_argument('--interface', '-i', type=str,  nargs=2, metavar=('IF', 'X.X.X.X'), help='Assign ip address to interface.')
node_command_group.add_argument('--bmcip', '-b', metavar='X.X.X.X', help='Assign ip address to BMC interface.')
node_command.add_argument('--mac', metavar='XX:XX:XX:XX:XX', type=str, help='Mac address. Specify empty string to erase.')
node_command.add_argument('--switch', '-s', type=str, help='Switch.')
node_command.add_argument('--localboot', '-l', choices=['y', 'n'], help='Boot from local HDD.')
node_command.add_argument('--setupbmc', '--sb', choices=['y', 'n'], help='Whether to setup BMC on install.')
node_command.add_argument('--service', '--sv', choices=['y', 'n'], help='Enter to service mode instead of install.')
#node_command.add_argument('--ip', metavar='X.X.X.X', type=str, help='IP for interface.')
node_command.add_argument('--port', '-p', type=str, help='Port.')
# rename
node_command = node_parser_actions.add_parser('rename', help='Rename Node.')
node_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Node.')
node_command.add_argument('--newname', '--nn', required=True, type=str, help='New name of the Node.')
# delete
node_command = node_parser_actions.add_parser('delete', help='Delete Node.')
node_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Node.')


# Switch
switch_parser = luna_subparsers.add_parser('switch', help='Switch operations.')
switch_parser_actions = switch_parser.add_subparsers(dest='action')
# list
switch_command = switch_parser_actions.add_parser('list', help='List Switches.')
# show
switch_command = switch_parser_actions.add_parser('show', help='Show Switch.')
switch_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Switch.')
switch_command.add_argument('--raw', '-R', action='store_true', help='Raw JSON output.')
# add
switch_command = switch_parser_actions.add_parser('add', help='Add Switch.')
switch_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Switch.')
switch_command.add_argument('--network', '-N', required=True, type=str, help='Network Switch belongs to.')
switch_command.add_argument('--ip', '-i', required=True, type=str, help='IP of the Switch.')
switch_command.add_argument('--read', '-r', type=str, help='Read community', default = 'public')
switch_command.add_argument('--rw', '-w', type=str, help='Write community', default = 'private')
switch_command.add_argument('--oid', '-o', type=str, help='OID of the Switch.', default = '.1.3.6.1.2.1.17.7.1.2.2.1.2')
# change
switch_command = switch_parser_actions.add_parser('change', help='Change Switch.')
switch_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Switch.')
switch_command.add_argument('--network', '-N', type=str, help='Network Switch belongs to.')
switch_command.add_argument('--ip', '-i', type=str, help='IP of the Switch.')
switch_command.add_argument('--read', '-r', type=str, help='Read community')
switch_command.add_argument('--rw', '-w', type=str, help='Write community')
switch_command.add_argument('--oid', '-o', type=str, help='OID of the Switch.')
# rename
switch_command = switch_parser_actions.add_parser('rename', help='Rename Switch.')
switch_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Switch.')
switch_command.add_argument('--newname', '--nn', required=True, type=str, help='New name of the Switch.')
# delete
switch_command = switch_parser_actions.add_parser('delete', help='Delete Switch.')
switch_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Switch.')


# Otherdev
otherdev_parser = luna_subparsers.add_parser('otherdev', help='Other devices operations.')
otherdev_parser_actions = otherdev_parser.add_subparsers(dest='action')
# list
otherdev_command = otherdev_parser_actions.add_parser('list', help='List other devices.')
# show
otherdev_command = otherdev_parser_actions.add_parser('show', help='Show device.')
otherdev_command.add_argument('--name', '-n', required=True, type=str, help='Name of the device.')
otherdev_command.add_argument('--raw', '-R', action='store_true', help='Raw JSON output.')
# add
otherdev_command = otherdev_parser_actions.add_parser('add', help='Add device.')
otherdev_command.add_argument('--name', '-n', required=True, type=str, help='Name of the device.')
otherdev_command.add_argument('--network', '-N', required=True, type=str, help='Network device belongs to.')
otherdev_command.add_argument('--ip', '-i', type=str, help='IP of the device.')
# change
otherdev_command = otherdev_parser_actions.add_parser('change', help='Change device.')
otherdev_command.add_argument('--name', '-n', required=True, type=str, help='Name of the device.')
otherdev_command.add_argument('--network', '-N', type=str, help='Network device belongs to.')
otherdev_command.add_argument('--ip', '-i', type=str, help='IP of the device. Specify empty string to delete.')
# rename
otherdev_command = otherdev_parser_actions.add_parser('rename', help='Rename device.')
otherdev_command.add_argument('--name', '-n', required=True, type=str, help='Name of the device.')
otherdev_command.add_argument('--newname', '--nn', required=True, type=str, help='New name of the device.')
# delete
otherdev_command = otherdev_parser_actions.add_parser('delete', help='Delete device.')
otherdev_command.add_argument('--name', '-n', required=True, type=str, help='Name of the device.')

try:
    mongo_client = pymongo.MongoClient(utils.helpers.get_con_options())
except:
    logger.error("Unable to connect to MongoDB.")
    raise RuntimeError
logger.debug("Connection to MongoDB was successful.")
mongo_db = mongo_client[luna.db_name]


if __name__ == '__main__':
        args = parser.parse_args()
        args_d = vars(args)
        current_env = sys.modules[__name__]
        try:
            call_fun =  getattr(current_env, '%s_%s' % (args.item, args.action))
            args_d.pop('item')
            args_d.pop('action')
            call_fun(**args_d)
        except:
            raise
